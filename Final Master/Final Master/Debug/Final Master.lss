
Final Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000440  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800060  00800060  000004b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012a3  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000094e  00000000  00000000  000018e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b17  00000000  00000000  00002231  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  00002d48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ff  00000000  00000000  00002efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008e1  00000000  00000000  000035fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003edc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 36       	cpi	r26, 0x6A	; 106
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  74:	0c 94 1e 02 	jmp	0x43c	; 0x43c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Sensors_Init>:
#include "Flex_Sensor.h"


void Sensors_Init(void)
{
	ADC_Init();
  7c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <ADC_Init>
  80:	08 95       	ret

00000082 <Sensor_Value>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	2f e5       	ldi	r18, 0x5F	; 95
  84:	8a ee       	ldi	r24, 0xEA	; 234
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <Sensor_Value+0x6>
  90:	00 c0       	rjmp	.+0      	; 0x92 <Sensor_Value+0x10>
  92:	00 00       	nop
}

uint16 Sensor_Value()
{
	_delay_ms(300);
	ADC_Start_Conversion(0); 
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	0e 94 68 01 	call	0x2d0	; 0x2d0 <ADC_Start_Conversion>
	ADC_Get_Result(&Sensor_1);    
  9a:	88 e6       	ldi	r24, 0x68	; 104
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <ADC_Get_Result>
  a2:	83 ed       	ldi	r24, 0xD3	; 211
  a4:	90 e3       	ldi	r25, 0x30	; 48
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <Sensor_Value+0x24>
  aa:	00 c0       	rjmp	.+0      	; 0xac <Sensor_Value+0x2a>
  ac:	00 00       	nop
	_delay_ms(50);
	ADC_Start_Conversion(1);
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	0e 94 68 01 	call	0x2d0	; 0x2d0 <ADC_Start_Conversion>
	ADC_Get_Result(&Sensor_2);
  b4:	84 e6       	ldi	r24, 0x64	; 100
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 74 01 	call	0x2e8	; 0x2e8 <ADC_Get_Result>
  bc:	83 ed       	ldi	r24, 0xD3	; 211
  be:	90 e3       	ldi	r25, 0x30	; 48
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <Sensor_Value+0x3e>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <Sensor_Value+0x44>
  c6:	00 00       	nop
	_delay_ms(50);
	ADC_Start_Conversion(2);
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	0e 94 68 01 	call	0x2d0	; 0x2d0 <ADC_Start_Conversion>
	ADC_Get_Result(&Sensor_3);
  ce:	86 e6       	ldi	r24, 0x66	; 102
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 74 01 	call	0x2e8	; 0x2e8 <ADC_Get_Result>
  d6:	83 ed       	ldi	r24, 0xD3	; 211
  d8:	90 e3       	ldi	r25, 0x30	; 48
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <Sensor_Value+0x58>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <Sensor_Value+0x5e>
  e0:	00 00       	nop
	_delay_ms(50);
	ADC_Start_Conversion(3);
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	0e 94 68 01 	call	0x2d0	; 0x2d0 <ADC_Start_Conversion>
	ADC_Get_Result(&Sensor_4);
  e8:	82 e6       	ldi	r24, 0x62	; 98
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 74 01 	call	0x2e8	; 0x2e8 <ADC_Get_Result>
  f0:	83 ed       	ldi	r24, 0xD3	; 211
  f2:	90 e3       	ldi	r25, 0x30	; 48
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <Sensor_Value+0x72>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <Sensor_Value+0x78>
  fa:	00 00       	nop
	_delay_ms(50);
	ADC_Start_Conversion(4);
  fc:	84 e0       	ldi	r24, 0x04	; 4
  fe:	0e 94 68 01 	call	0x2d0	; 0x2d0 <ADC_Start_Conversion>
	ADC_Get_Result(&Sensor_5);
 102:	80 e6       	ldi	r24, 0x60	; 96
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 74 01 	call	0x2e8	; 0x2e8 <ADC_Get_Result>
 10a:	83 ed       	ldi	r24, 0xD3	; 211
 10c:	90 e3       	ldi	r25, 0x30	; 48
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <Sensor_Value+0x8c>
 112:	00 c0       	rjmp	.+0      	; 0x114 <Sensor_Value+0x92>
 114:	00 00       	nop
	_delay_ms(50);
}
 116:	08 95       	ret

00000118 <main>:

/************************************************MASTER*************************************************************/

int main(void)
{
	Sensors_Init();
 118:	0e 94 3e 00 	call	0x7c	; 0x7c <Sensors_Init>
	UART_Init();			
 11c:	0e 94 0e 02 	call	0x41c	; 0x41c <UART_Init>
    DIO_WritePinDir(DIO_PIND1,Output);  // SET TX AS OUTPUT
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	89 e1       	ldi	r24, 0x19	; 25
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_WritePinDir>

	while(1)
	{
	
		Sensor_Value();
 12c:	0e 94 41 00 	call	0x82	; 0x82 <Sensor_Value>

		if	       (Sensor_1 Closed && Sensor_2 Open && Sensor_3 Open && Sensor_4 Open && Sensor_5 Open)
 130:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <Sensor_1>
 134:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <Sensor_1+0x1>
 138:	81 32       	cpi	r24, 0x21	; 33
 13a:	23 e0       	ldi	r18, 0x03	; 3
 13c:	92 07       	cpc	r25, r18
 13e:	00 f1       	brcs	.+64     	; 0x180 <main+0x68>
 140:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <Sensor_2>
 144:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <Sensor_2+0x1>
 148:	20 32       	cpi	r18, 0x20	; 32
 14a:	33 40       	sbci	r19, 0x03	; 3
 14c:	c8 f4       	brcc	.+50     	; 0x180 <main+0x68>
 14e:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <Sensor_3>
 152:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <Sensor_3+0x1>
 156:	20 32       	cpi	r18, 0x20	; 32
 158:	33 40       	sbci	r19, 0x03	; 3
 15a:	90 f4       	brcc	.+36     	; 0x180 <main+0x68>
 15c:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <Sensor_4>
 160:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <Sensor_4+0x1>
 164:	20 32       	cpi	r18, 0x20	; 32
 166:	33 40       	sbci	r19, 0x03	; 3
 168:	58 f4       	brcc	.+22     	; 0x180 <main+0x68>
 16a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 16e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 172:	20 32       	cpi	r18, 0x20	; 32
 174:	33 40       	sbci	r19, 0x03	; 3
 176:	20 f4       	brcc	.+8      	; 0x180 <main+0x68>
		{
			UART_SendChar('f');  //Send Forward motion
 178:	86 e6       	ldi	r24, 0x66	; 102
 17a:	0e 94 1a 02 	call	0x434	; 0x434 <UART_SendChar>
 17e:	8e c0       	rjmp	.+284    	; 0x29c <main+0x184>
		}
       
		else if	   (Sensor_1 Open && Sensor_2 Open && Sensor_3 Open && Sensor_4 Open && Sensor_5 Closed)
 180:	80 32       	cpi	r24, 0x20	; 32
 182:	23 e0       	ldi	r18, 0x03	; 3
 184:	92 07       	cpc	r25, r18
 186:	00 f5       	brcc	.+64     	; 0x1c8 <main+0xb0>
 188:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <Sensor_2>
 18c:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <Sensor_2+0x1>
 190:	20 32       	cpi	r18, 0x20	; 32
 192:	33 40       	sbci	r19, 0x03	; 3
 194:	c8 f4       	brcc	.+50     	; 0x1c8 <main+0xb0>
 196:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <Sensor_3>
 19a:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <Sensor_3+0x1>
 19e:	20 32       	cpi	r18, 0x20	; 32
 1a0:	33 40       	sbci	r19, 0x03	; 3
 1a2:	90 f4       	brcc	.+36     	; 0x1c8 <main+0xb0>
 1a4:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <Sensor_4>
 1a8:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <Sensor_4+0x1>
 1ac:	20 32       	cpi	r18, 0x20	; 32
 1ae:	33 40       	sbci	r19, 0x03	; 3
 1b0:	58 f4       	brcc	.+22     	; 0x1c8 <main+0xb0>
 1b2:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b6:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1ba:	21 32       	cpi	r18, 0x21	; 33
 1bc:	33 40       	sbci	r19, 0x03	; 3
 1be:	20 f0       	brcs	.+8      	; 0x1c8 <main+0xb0>
		{
			UART_SendChar('b');  //Send Backward motion
 1c0:	82 e6       	ldi	r24, 0x62	; 98
 1c2:	0e 94 1a 02 	call	0x434	; 0x434 <UART_SendChar>
 1c6:	6a c0       	rjmp	.+212    	; 0x29c <main+0x184>
		}
		else if	   (Sensor_1 Open && Sensor_2 Open && Sensor_3 Closed && Sensor_4 Open && Sensor_5 Open)
 1c8:	80 32       	cpi	r24, 0x20	; 32
 1ca:	23 e0       	ldi	r18, 0x03	; 3
 1cc:	92 07       	cpc	r25, r18
 1ce:	00 f5       	brcc	.+64     	; 0x210 <main+0xf8>
 1d0:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <Sensor_2>
 1d4:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <Sensor_2+0x1>
 1d8:	20 32       	cpi	r18, 0x20	; 32
 1da:	33 40       	sbci	r19, 0x03	; 3
 1dc:	c8 f4       	brcc	.+50     	; 0x210 <main+0xf8>
 1de:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <Sensor_3>
 1e2:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <Sensor_3+0x1>
 1e6:	21 32       	cpi	r18, 0x21	; 33
 1e8:	33 40       	sbci	r19, 0x03	; 3
 1ea:	90 f0       	brcs	.+36     	; 0x210 <main+0xf8>
 1ec:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <Sensor_4>
 1f0:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <Sensor_4+0x1>
 1f4:	20 32       	cpi	r18, 0x20	; 32
 1f6:	33 40       	sbci	r19, 0x03	; 3
 1f8:	58 f4       	brcc	.+22     	; 0x210 <main+0xf8>
 1fa:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1fe:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 202:	20 32       	cpi	r18, 0x20	; 32
 204:	33 40       	sbci	r19, 0x03	; 3
 206:	20 f4       	brcc	.+8      	; 0x210 <main+0xf8>
		{
			UART_SendChar('l');  //Send left motion
 208:	8c e6       	ldi	r24, 0x6C	; 108
 20a:	0e 94 1a 02 	call	0x434	; 0x434 <UART_SendChar>
 20e:	46 c0       	rjmp	.+140    	; 0x29c <main+0x184>
		}
		else if	   (Sensor_1 Open && Sensor_2 Open && Sensor_3 Open && Sensor_4 Closed && Sensor_5 Open)
 210:	80 32       	cpi	r24, 0x20	; 32
 212:	23 e0       	ldi	r18, 0x03	; 3
 214:	92 07       	cpc	r25, r18
 216:	00 f5       	brcc	.+64     	; 0x258 <main+0x140>
 218:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <Sensor_2>
 21c:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <Sensor_2+0x1>
 220:	20 32       	cpi	r18, 0x20	; 32
 222:	33 40       	sbci	r19, 0x03	; 3
 224:	c8 f4       	brcc	.+50     	; 0x258 <main+0x140>
 226:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <Sensor_3>
 22a:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <Sensor_3+0x1>
 22e:	20 32       	cpi	r18, 0x20	; 32
 230:	33 40       	sbci	r19, 0x03	; 3
 232:	90 f4       	brcc	.+36     	; 0x258 <main+0x140>
 234:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <Sensor_4>
 238:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <Sensor_4+0x1>
 23c:	21 32       	cpi	r18, 0x21	; 33
 23e:	33 40       	sbci	r19, 0x03	; 3
 240:	58 f0       	brcs	.+22     	; 0x258 <main+0x140>
 242:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 246:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 24a:	20 32       	cpi	r18, 0x20	; 32
 24c:	33 40       	sbci	r19, 0x03	; 3
 24e:	20 f4       	brcc	.+8      	; 0x258 <main+0x140>
		{

			UART_SendChar('r');  //Send right motion
 250:	82 e7       	ldi	r24, 0x72	; 114
 252:	0e 94 1a 02 	call	0x434	; 0x434 <UART_SendChar>
 256:	22 c0       	rjmp	.+68     	; 0x29c <main+0x184>
		}
		else if	   (Sensor_1 Open && Sensor_2 Closed && Sensor_3 Open && Sensor_4 Open && Sensor_5 Open)
 258:	80 32       	cpi	r24, 0x20	; 32
 25a:	93 40       	sbci	r25, 0x03	; 3
 25c:	f8 f4       	brcc	.+62     	; 0x29c <main+0x184>
 25e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Sensor_2>
 262:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <Sensor_2+0x1>
 266:	81 32       	cpi	r24, 0x21	; 33
 268:	93 40       	sbci	r25, 0x03	; 3
 26a:	c0 f0       	brcs	.+48     	; 0x29c <main+0x184>
 26c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Sensor_3>
 270:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <Sensor_3+0x1>
 274:	80 32       	cpi	r24, 0x20	; 32
 276:	93 40       	sbci	r25, 0x03	; 3
 278:	88 f4       	brcc	.+34     	; 0x29c <main+0x184>
 27a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Sensor_4>
 27e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Sensor_4+0x1>
 282:	80 32       	cpi	r24, 0x20	; 32
 284:	93 40       	sbci	r25, 0x03	; 3
 286:	50 f4       	brcc	.+20     	; 0x29c <main+0x184>
 288:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 28c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 290:	80 32       	cpi	r24, 0x20	; 32
 292:	93 40       	sbci	r25, 0x03	; 3
 294:	18 f4       	brcc	.+6      	; 0x29c <main+0x184>
		{
			UART_SendChar('s');  //Send Stop motion
 296:	83 e7       	ldi	r24, 0x73	; 115
 298:	0e 94 1a 02 	call	0x434	; 0x434 <UART_SendChar>
 29c:	4f e3       	ldi	r20, 0x3F	; 63
 29e:	8d e0       	ldi	r24, 0x0D	; 13
 2a0:	93 e0       	ldi	r25, 0x03	; 3
 2a2:	41 50       	subi	r20, 0x01	; 1
 2a4:	80 40       	sbci	r24, 0x00	; 0
 2a6:	90 40       	sbci	r25, 0x00	; 0
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <main+0x18a>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <main+0x194>
 2ac:	00 00       	nop
 2ae:	3e cf       	rjmp	.-388    	; 0x12c <main+0x14>

000002b0 <ADC_Init>:
{
	//Setting our ADC reference
	#if ADC_refrence == AREF_internal
	ADMUX &=~ (3<<6);
	#elif ADC_refrence == AVCC_external
	ADMUX |= (1<<6);
 2b0:	87 b1       	in	r24, 0x07	; 7
 2b2:	80 64       	ori	r24, 0x40	; 64
 2b4:	87 b9       	out	0x07, r24	; 7
	#endif
    //Setting our ADC Adjust
	#if ADC_Adjust == Right_Adjust
    ADMUX &=~ (1<<5);
    #elif ADC_Adjust == Left_Adjust
	ADMUX |= (1<<5);
 2b6:	87 b1       	in	r24, 0x07	; 7
 2b8:	80 62       	ori	r24, 0x20	; 32
 2ba:	87 b9       	out	0x07, r24	; 7
	#endif
    //Setting our Clock Prescalar
	#if PRESSCALER == 128
	ADCSRA |= (7<<0);
 2bc:	86 b1       	in	r24, 0x06	; 6
 2be:	87 60       	ori	r24, 0x07	; 7
 2c0:	86 b9       	out	0x06, r24	; 6
	#elif PRESSCALER == 64
	ADCSRA |= (6<<0);

	#endif

	ADCSRA |= (1<<7);
 2c2:	86 b1       	in	r24, 0x06	; 6
 2c4:	80 68       	ori	r24, 0x80	; 128
 2c6:	86 b9       	out	0x06, r24	; 6
	
	ADCSRA &=~ (1<<5);
 2c8:	86 b1       	in	r24, 0x06	; 6
 2ca:	8f 7d       	andi	r24, 0xDF	; 223
 2cc:	86 b9       	out	0x06, r24	; 6
 2ce:	08 95       	ret

000002d0 <ADC_Start_Conversion>:

}
void ADC_Start_Conversion(uint8 CH)
{
	if (CH <= 7 && CH >= 0) 
 2d0:	88 30       	cpi	r24, 0x08	; 8
 2d2:	48 f4       	brcc	.+18     	; 0x2e6 <ADC_Start_Conversion+0x16>
	{

		ADCSRA |= (1<<6);
 2d4:	96 b1       	in	r25, 0x06	; 6
 2d6:	90 64       	ori	r25, 0x40	; 64
 2d8:	96 b9       	out	0x06, r25	; 6
		ADMUX &=~ (7<<0);
 2da:	97 b1       	in	r25, 0x07	; 7
 2dc:	98 7f       	andi	r25, 0xF8	; 248
 2de:	97 b9       	out	0x07, r25	; 7
		ADMUX  |= (CH<<0);
 2e0:	97 b1       	in	r25, 0x07	; 7
 2e2:	89 2b       	or	r24, r25
 2e4:	87 b9       	out	0x07, r24	; 7
 2e6:	08 95       	ret

000002e8 <ADC_Get_Result>:
	}
}

void ADC_Get_Result(uint16 *Result)
{
 2e8:	fc 01       	movw	r30, r24
		*Result |= ((uint16)ADCH<<8);
	}
	else if (ADC_Adjust == Left_Adjust)
	{

		while((ADCSRA>>6)&1);
 2ea:	36 99       	sbic	0x06, 6	; 6
 2ec:	fe cf       	rjmp	.-4      	; 0x2ea <ADC_Get_Result+0x2>
		*Result = (ADCL >>6);
 2ee:	24 b1       	in	r18, 0x04	; 4
 2f0:	22 95       	swap	r18
 2f2:	26 95       	lsr	r18
 2f4:	26 95       	lsr	r18
 2f6:	23 70       	andi	r18, 0x03	; 3
 2f8:	42 2f       	mov	r20, r18
 2fa:	50 e0       	ldi	r21, 0x00	; 0
 2fc:	51 83       	std	Z+1, r21	; 0x01
 2fe:	40 83       	st	Z, r20
		*Result |= ((uint16)ADCH<<2);
 300:	95 b1       	in	r25, 0x05	; 5
 302:	29 2f       	mov	r18, r25
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	22 0f       	add	r18, r18
 308:	33 1f       	adc	r19, r19
 30a:	22 0f       	add	r18, r18
 30c:	33 1f       	adc	r19, r19
 30e:	24 2b       	or	r18, r20
 310:	35 2b       	or	r19, r21
 312:	31 83       	std	Z+1, r19	; 0x01
 314:	20 83       	st	Z, r18
 316:	08 95       	ret

00000318 <DIO_WritePinDir>:
/**************************************************_Functions_Definitions_****************************************/

void DIO_WritePinDir(DIO_PIN Pin,DIO_Dir Dir)
{
	{
		DIO_PORT Port = Pin / 8;
 318:	98 2f       	mov	r25, r24
 31a:	96 95       	lsr	r25
 31c:	96 95       	lsr	r25
 31e:	96 95       	lsr	r25
		DIO_PIN  Pin_No =   Pin % 8;
 320:	87 70       	andi	r24, 0x07	; 7
		
		switch(Port)
 322:	91 30       	cpi	r25, 0x01	; 1
 324:	21 f1       	breq	.+72     	; 0x36e <DIO_WritePinDir+0x56>
 326:	30 f0       	brcs	.+12     	; 0x334 <DIO_WritePinDir+0x1c>
 328:	92 30       	cpi	r25, 0x02	; 2
 32a:	f1 f1       	breq	.+124    	; 0x3a8 <DIO_WritePinDir+0x90>
 32c:	93 30       	cpi	r25, 0x03	; 3
 32e:	09 f4       	brne	.+2      	; 0x332 <DIO_WritePinDir+0x1a>
 330:	58 c0       	rjmp	.+176    	; 0x3e2 <DIO_WritePinDir+0xca>
 332:	08 95       	ret
		{
			case DIO_PORTA:
			if(Dir == Output)
 334:	61 30       	cpi	r22, 0x01	; 1
 336:	69 f4       	brne	.+26     	; 0x352 <DIO_WritePinDir+0x3a>
			{
				SetBit(PORTA_REG,Pin_No);
 338:	4b b3       	in	r20, 0x1b	; 27
 33a:	21 e0       	ldi	r18, 0x01	; 1
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	b9 01       	movw	r22, r18
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_WritePinDir+0x2e>
 342:	66 0f       	add	r22, r22
 344:	77 1f       	adc	r23, r23
 346:	8a 95       	dec	r24
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_WritePinDir+0x2a>
 34a:	cb 01       	movw	r24, r22
 34c:	84 2b       	or	r24, r20
 34e:	8b bb       	out	0x1b, r24	; 27
 350:	08 95       	ret
			}
			else
			{
				ClrBit(PORTA_REG,Pin_No);
 352:	4b b3       	in	r20, 0x1b	; 27
 354:	21 e0       	ldi	r18, 0x01	; 1
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	b9 01       	movw	r22, r18
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_WritePinDir+0x48>
 35c:	66 0f       	add	r22, r22
 35e:	77 1f       	adc	r23, r23
 360:	8a 95       	dec	r24
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_WritePinDir+0x44>
 364:	cb 01       	movw	r24, r22
 366:	80 95       	com	r24
 368:	84 23       	and	r24, r20
 36a:	8b bb       	out	0x1b, r24	; 27
 36c:	08 95       	ret
			}
			break;
			case DIO_PORTB:
			if(Dir == Output)
 36e:	61 30       	cpi	r22, 0x01	; 1
 370:	69 f4       	brne	.+26     	; 0x38c <DIO_WritePinDir+0x74>
			{
				SetBit(PORTB_REG,Pin_No);
 372:	48 b3       	in	r20, 0x18	; 24
 374:	21 e0       	ldi	r18, 0x01	; 1
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	b9 01       	movw	r22, r18
 37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_WritePinDir+0x68>
 37c:	66 0f       	add	r22, r22
 37e:	77 1f       	adc	r23, r23
 380:	8a 95       	dec	r24
 382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_WritePinDir+0x64>
 384:	cb 01       	movw	r24, r22
 386:	84 2b       	or	r24, r20
 388:	88 bb       	out	0x18, r24	; 24
 38a:	08 95       	ret
			}
			else
			{
				ClrBit(PORTB_REG,Pin_No);
 38c:	48 b3       	in	r20, 0x18	; 24
 38e:	21 e0       	ldi	r18, 0x01	; 1
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	b9 01       	movw	r22, r18
 394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_WritePinDir+0x82>
 396:	66 0f       	add	r22, r22
 398:	77 1f       	adc	r23, r23
 39a:	8a 95       	dec	r24
 39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_WritePinDir+0x7e>
 39e:	cb 01       	movw	r24, r22
 3a0:	80 95       	com	r24
 3a2:	84 23       	and	r24, r20
 3a4:	88 bb       	out	0x18, r24	; 24
 3a6:	08 95       	ret
			}
			break;
			
			case DIO_PORTC:
			if(Dir == Output)
 3a8:	61 30       	cpi	r22, 0x01	; 1
 3aa:	69 f4       	brne	.+26     	; 0x3c6 <DIO_WritePinDir+0xae>
			{
				SetBit(PORTC_REG,Pin_No);
 3ac:	45 b3       	in	r20, 0x15	; 21
 3ae:	21 e0       	ldi	r18, 0x01	; 1
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	b9 01       	movw	r22, r18
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_WritePinDir+0xa2>
 3b6:	66 0f       	add	r22, r22
 3b8:	77 1f       	adc	r23, r23
 3ba:	8a 95       	dec	r24
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_WritePinDir+0x9e>
 3be:	cb 01       	movw	r24, r22
 3c0:	84 2b       	or	r24, r20
 3c2:	85 bb       	out	0x15, r24	; 21
 3c4:	08 95       	ret
			}
			else
			{
				ClrBit(PORTC_REG,Pin_No);
 3c6:	45 b3       	in	r20, 0x15	; 21
 3c8:	21 e0       	ldi	r18, 0x01	; 1
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	b9 01       	movw	r22, r18
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_WritePinDir+0xbc>
 3d0:	66 0f       	add	r22, r22
 3d2:	77 1f       	adc	r23, r23
 3d4:	8a 95       	dec	r24
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_WritePinDir+0xb8>
 3d8:	cb 01       	movw	r24, r22
 3da:	80 95       	com	r24
 3dc:	84 23       	and	r24, r20
 3de:	85 bb       	out	0x15, r24	; 21
 3e0:	08 95       	ret
			}
			break;
			case DIO_PORTD:
			if(Dir == STD_High)
 3e2:	61 30       	cpi	r22, 0x01	; 1
 3e4:	69 f4       	brne	.+26     	; 0x400 <__EEPROM_REGION_LENGTH__>
			{
				SetBit(PORTD_REG,Pin_No);
 3e6:	42 b3       	in	r20, 0x12	; 18
 3e8:	21 e0       	ldi	r18, 0x01	; 1
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	b9 01       	movw	r22, r18
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_WritePinDir+0xdc>
 3f0:	66 0f       	add	r22, r22
 3f2:	77 1f       	adc	r23, r23
 3f4:	8a 95       	dec	r24
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_WritePinDir+0xd8>
 3f8:	cb 01       	movw	r24, r22
 3fa:	84 2b       	or	r24, r20
 3fc:	82 bb       	out	0x12, r24	; 18
 3fe:	08 95       	ret
			}
			else
			{
				ClrBit(PORTD_REG,Pin_No);
 400:	42 b3       	in	r20, 0x12	; 18
 402:	21 e0       	ldi	r18, 0x01	; 1
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	b9 01       	movw	r22, r18
 408:	02 c0       	rjmp	.+4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40a:	66 0f       	add	r22, r22
 40c:	77 1f       	adc	r23, r23
 40e:	8a 95       	dec	r24
 410:	e2 f7       	brpl	.-8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 412:	cb 01       	movw	r24, r22
 414:	80 95       	com	r24
 416:	84 23       	and	r24, r20
 418:	82 bb       	out	0x12, r24	; 18
 41a:	08 95       	ret

0000041c <UART_Init>:

void UART_Init()
{
	// Setting our Mode Speed
	#if SPEED_MODE == NORMAL
	 UCSRA &=~(1<<1);
 41c:	8b b1       	in	r24, 0x0b	; 11
 41e:	8d 7f       	andi	r24, 0xFD	; 253
 420:	8b b9       	out	0x0b, r24	; 11
	#if UART_MODE == TRANSCIEVER
	UCSRB |=(3<<3);
	#elif UART_MODE == RECIEVER
	UCSRB |=(1<<4);
	#elif UART_MODE == TRANSMITTER
	UCSRB |=(1<<3);
 422:	8a b1       	in	r24, 0x0a	; 10
 424:	88 60       	ori	r24, 0x08	; 8
 426:	8a b9       	out	0x0a, r24	; 10
	#if CLOCK_MODE == ASYCH
	Local_u8UCSRC &=~(1<<6);
	#endif

	Local_u8UCSRC |=(1<<7);
	UCSRC = Local_u8UCSRC;
 428:	8e e8       	ldi	r24, 0x8E	; 142
 42a:	80 bd       	out	0x20, r24	; 32
	//for calculating the BAUDRATE
	uint16 Local_u16UBRR = BUAD(BAUDRATE);

	Local_u16UBRR &=~(1<<15);

	UBRRL  = (uint8)Local_u16UBRR;
 42c:	85 e0       	ldi	r24, 0x05	; 5
 42e:	89 b9       	out	0x09, r24	; 9
	UBRRH  = (Local_u16UBRR>>8);
 430:	10 bc       	out	0x20, r1	; 32
 432:	08 95       	ret

00000434 <UART_SendChar>:
}

void UART_SendChar(uint8 ch)
{
	while (!((UCSRA>>UDRE)&1));
 434:	5d 9b       	sbis	0x0b, 5	; 11
 436:	fe cf       	rjmp	.-4      	; 0x434 <UART_SendChar>
	UDR = ch;
 438:	8c b9       	out	0x0c, r24	; 12
 43a:	08 95       	ret

0000043c <_exit>:
 43c:	f8 94       	cli

0000043e <__stop_program>:
 43e:	ff cf       	rjmp	.-2      	; 0x43e <__stop_program>
