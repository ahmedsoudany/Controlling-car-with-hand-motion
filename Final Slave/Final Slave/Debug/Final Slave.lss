
Final Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  000005e0  00000654  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000178  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001781  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a11  00000000  00000000  00001fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bdf  00000000  00000000  000029f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000278  00000000  00000000  000035d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000604  00000000  00000000  0000384c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006fd  00000000  00000000  00003e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  0000454d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ee       	ldi	r30, 0xE0	; 224
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 91 01 	call	0x322	; 0x322 <main>
  7a:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DCMOTOR_Init>:
	PWM0_Start();
}

void DCMOTOR_Stop()
{
	PWM0_Stop();
  82:	41 e0       	ldi	r20, 0x01	; 1
  84:	64 e0       	ldi	r22, 0x04	; 4
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DIO_PinDir>
  8c:	41 e0       	ldi	r20, 0x01	; 1
  8e:	65 e0       	ldi	r22, 0x05	; 5
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DIO_PinDir>
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	66 e0       	ldi	r22, 0x06	; 6
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DIO_PinDir>
  a0:	41 e0       	ldi	r20, 0x01	; 1
  a2:	67 e0       	ldi	r22, 0x07	; 7
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DIO_PinDir>
  aa:	0e 94 95 02 	call	0x52a	; 0x52a <PWM0_Init>
  ae:	08 95       	ret

000000b0 <DCMOTOR_SetDir>:
  b0:	66 23       	and	r22, r22
  b2:	19 f0       	breq	.+6      	; 0xba <DCMOTOR_SetDir+0xa>
  b4:	61 30       	cpi	r22, 0x01	; 1
  b6:	59 f1       	breq	.+86     	; 0x10e <DCMOTOR_SetDir+0x5e>
  b8:	08 95       	ret
  ba:	83 30       	cpi	r24, 0x03	; 3
  bc:	91 05       	cpc	r25, r1
  be:	89 f0       	breq	.+34     	; 0xe2 <DCMOTOR_SetDir+0x32>
  c0:	84 30       	cpi	r24, 0x04	; 4
  c2:	91 05       	cpc	r25, r1
  c4:	c9 f0       	breq	.+50     	; 0xf8 <DCMOTOR_SetDir+0x48>
  c6:	02 97       	sbiw	r24, 0x02	; 2
  c8:	09 f0       	breq	.+2      	; 0xcc <DCMOTOR_SetDir+0x1c>
  ca:	49 c0       	rjmp	.+146    	; 0x15e <DCMOTOR_SetDir+0xae>
  cc:	41 e0       	ldi	r20, 0x01	; 1
  ce:	64 e0       	ldi	r22, 0x04	; 4
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_PinVal>
  d6:	40 e0       	ldi	r20, 0x00	; 0
  d8:	65 e0       	ldi	r22, 0x05	; 5
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_PinVal>
  e0:	08 95       	ret
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	64 e0       	ldi	r22, 0x04	; 4
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_PinVal>
  ec:	41 e0       	ldi	r20, 0x01	; 1
  ee:	65 e0       	ldi	r22, 0x05	; 5
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_PinVal>
  f6:	08 95       	ret
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	64 e0       	ldi	r22, 0x04	; 4
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_PinVal>
 102:	40 e0       	ldi	r20, 0x00	; 0
 104:	65 e0       	ldi	r22, 0x05	; 5
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_PinVal>
 10c:	08 95       	ret
 10e:	83 30       	cpi	r24, 0x03	; 3
 110:	91 05       	cpc	r25, r1
 112:	81 f0       	breq	.+32     	; 0x134 <DCMOTOR_SetDir+0x84>
 114:	84 30       	cpi	r24, 0x04	; 4
 116:	91 05       	cpc	r25, r1
 118:	c1 f0       	breq	.+48     	; 0x14a <DCMOTOR_SetDir+0x9a>
 11a:	02 97       	sbiw	r24, 0x02	; 2
 11c:	01 f5       	brne	.+64     	; 0x15e <DCMOTOR_SetDir+0xae>
 11e:	41 e0       	ldi	r20, 0x01	; 1
 120:	66 e0       	ldi	r22, 0x06	; 6
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_PinVal>
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	67 e0       	ldi	r22, 0x07	; 7
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_PinVal>
 132:	08 95       	ret
 134:	40 e0       	ldi	r20, 0x00	; 0
 136:	66 e0       	ldi	r22, 0x06	; 6
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_PinVal>
 13e:	41 e0       	ldi	r20, 0x01	; 1
 140:	67 e0       	ldi	r22, 0x07	; 7
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_PinVal>
 148:	08 95       	ret
 14a:	40 e0       	ldi	r20, 0x00	; 0
 14c:	66 e0       	ldi	r22, 0x06	; 6
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_PinVal>
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	67 e0       	ldi	r22, 0x07	; 7
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_PinVal>
 15e:	08 95       	ret

00000160 <DCMOTOR_SetSpeed>:
 160:	0e 94 a5 02 	call	0x54a	; 0x54a <PWM0_SetDutyCycle>
 164:	08 95       	ret

00000166 <DCMOTOR_Start>:
 166:	0e 94 b4 02 	call	0x568	; 0x568 <PWM0_Start>
 16a:	08 95       	ret

0000016c <Forward>:
}

void Forward()
	{
	LCD_cmd(0X01);       //for clearing the LCD
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	0e 94 23 01 	call	0x246	; 0x246 <LCD_cmd>
	DCMOTOR_SetDir(CLW,A);
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	82 e0       	ldi	r24, 0x02	; 2
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 58 00 	call	0xb0	; 0xb0 <DCMOTOR_SetDir>
	DCMOTOR_SetDir(CLW,B);
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 58 00 	call	0xb0	; 0xb0 <DCMOTOR_SetDir>
	LCD_print("Forward");
 186:	80 e6       	ldi	r24, 0x60	; 96
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD_print>
 18e:	08 95       	ret

00000190 <Backward>:
}

void Backward()
{
	LCD_cmd(0X01);	
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	0e 94 23 01 	call	0x246	; 0x246 <LCD_cmd>
	DCMOTOR_SetDir(ACLW,A);
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	83 e0       	ldi	r24, 0x03	; 3
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 58 00 	call	0xb0	; 0xb0 <DCMOTOR_SetDir>
	DCMOTOR_SetDir(ACLW,B);
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	83 e0       	ldi	r24, 0x03	; 3
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 58 00 	call	0xb0	; 0xb0 <DCMOTOR_SetDir>
    LCD_print("Backward");
 1aa:	88 e6       	ldi	r24, 0x68	; 104
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD_print>
 1b2:	08 95       	ret

000001b4 <Right>:
}


void Right()
{
	LCD_cmd(0X01);	
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	0e 94 23 01 	call	0x246	; 0x246 <LCD_cmd>
	DCMOTOR_SetDir(ACLW,A);
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	83 e0       	ldi	r24, 0x03	; 3
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 58 00 	call	0xb0	; 0xb0 <DCMOTOR_SetDir>
	DCMOTOR_SetDir(CLW,B);
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 58 00 	call	0xb0	; 0xb0 <DCMOTOR_SetDir>
	LCD_print("Right");   
 1ce:	81 e7       	ldi	r24, 0x71	; 113
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD_print>
 1d6:	08 95       	ret

000001d8 <Left>:
}

void Left()
{
	LCD_cmd(0X01);	
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	0e 94 23 01 	call	0x246	; 0x246 <LCD_cmd>
	DCMOTOR_SetDir(CLW,A);
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 58 00 	call	0xb0	; 0xb0 <DCMOTOR_SetDir>
	DCMOTOR_SetDir(ACLW,B);
 1e8:	61 e0       	ldi	r22, 0x01	; 1
 1ea:	83 e0       	ldi	r24, 0x03	; 3
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 58 00 	call	0xb0	; 0xb0 <DCMOTOR_SetDir>
	LCD_print("Left");  
 1f2:	87 e7       	ldi	r24, 0x77	; 119
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD_print>
 1fa:	08 95       	ret

000001fc <Stop>:
}

void Stop()
{	
	LCD_cmd(0X01);	
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	0e 94 23 01 	call	0x246	; 0x246 <LCD_cmd>
	DCMOTOR_SetDir(STOP,A);
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	84 e0       	ldi	r24, 0x04	; 4
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 58 00 	call	0xb0	; 0xb0 <DCMOTOR_SetDir>
	DCMOTOR_SetDir(STOP,B);
 20c:	61 e0       	ldi	r22, 0x01	; 1
 20e:	84 e0       	ldi	r24, 0x04	; 4
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 58 00 	call	0xb0	; 0xb0 <DCMOTOR_SetDir>
	LCD_print("CAR STOPPED");
 216:	8c e7       	ldi	r24, 0x7C	; 124
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD_print>
 21e:	08 95       	ret

00000220 <LCD_en>:
}

#elif defined LCD_4bit
void LCD_en(void)
{
	Set_Bit(PORTB,LCD_E);
 220:	88 b3       	in	r24, 0x18	; 24
 222:	84 60       	ori	r24, 0x04	; 4
 224:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 226:	83 ef       	ldi	r24, 0xF3	; 243
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <LCD_en+0xa>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <LCD_en+0x10>
 230:	00 00       	nop
	_delay_ms(2);
	Clr_Bit(PORTB,LCD_E);
 232:	88 b3       	in	r24, 0x18	; 24
 234:	8b 7f       	andi	r24, 0xFB	; 251
 236:	88 bb       	out	0x18, r24	; 24
 238:	83 ef       	ldi	r24, 0xF3	; 243
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <LCD_en+0x1c>
 240:	00 c0       	rjmp	.+0      	; 0x242 <LCD_en+0x22>
 242:	00 00       	nop
 244:	08 95       	ret

00000246 <LCD_cmd>:
	LCD_cmd(0x0E);
	LCD_cmd(0x01);
	_delay_ms(2);
}
void LCD_cmd(uint8 cmd)
{
 246:	cf 93       	push	r28
 248:	c8 2f       	mov	r28, r24
	Clr_Bit(PORTB,LCD_Rs);
 24a:	88 b3       	in	r24, 0x18	; 24
 24c:	8e 7f       	andi	r24, 0xFE	; 254
 24e:	88 bb       	out	0x18, r24	; 24
	PORTA &= 0x0F;
 250:	8b b3       	in	r24, 0x1b	; 27
 252:	8f 70       	andi	r24, 0x0F	; 15
 254:	8b bb       	out	0x1b, r24	; 27
	PORTA |= cmd & 0xF0;
 256:	8b b3       	in	r24, 0x1b	; 27
 258:	9c 2f       	mov	r25, r28
 25a:	90 7f       	andi	r25, 0xF0	; 240
 25c:	89 2b       	or	r24, r25
 25e:	8b bb       	out	0x1b, r24	; 27
	
	LCD_en();
 260:	0e 94 10 01 	call	0x220	; 0x220 <LCD_en>
	PORTA &= 0x0F;
 264:	8b b3       	in	r24, 0x1b	; 27
 266:	8f 70       	andi	r24, 0x0F	; 15
 268:	8b bb       	out	0x1b, r24	; 27
	PORTA |= (cmd << 4) ;
 26a:	2b b3       	in	r18, 0x1b	; 27
 26c:	30 e1       	ldi	r19, 0x10	; 16
 26e:	c3 9f       	mul	r28, r19
 270:	c0 01       	movw	r24, r0
 272:	11 24       	eor	r1, r1
 274:	82 2b       	or	r24, r18
 276:	8b bb       	out	0x1b, r24	; 27
	
	LCD_en();
 278:	0e 94 10 01 	call	0x220	; 0x220 <LCD_en>
}
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <LCD_init>:
	Clr_Bit(PORTB,LCD_E);
	_delay_ms(2);
}
void LCD_init(void)
{
	Clr_Bit(PORTB,LCD_Rw);  // clear R/W to write
 280:	88 b3       	in	r24, 0x18	; 24
 282:	8d 7f       	andi	r24, 0xFD	; 253
 284:	88 bb       	out	0x18, r24	; 24
	DDRA = 0xF0;
 286:	80 ef       	ldi	r24, 0xF0	; 240
 288:	8a bb       	out	0x1a, r24	; 26
	DDRB |= 0x07;
 28a:	87 b3       	in	r24, 0x17	; 23
 28c:	87 60       	ori	r24, 0x07	; 7
 28e:	87 bb       	out	0x17, r24	; 23
	Clr_Bit(PORTB,LCD_E);
 290:	88 b3       	in	r24, 0x18	; 24
 292:	8b 7f       	andi	r24, 0xFB	; 251
 294:	88 bb       	out	0x18, r24	; 24
	LCD_cmd(0x33);
 296:	83 e3       	ldi	r24, 0x33	; 51
 298:	0e 94 23 01 	call	0x246	; 0x246 <LCD_cmd>
	LCD_cmd(0x32);
 29c:	82 e3       	ldi	r24, 0x32	; 50
 29e:	0e 94 23 01 	call	0x246	; 0x246 <LCD_cmd>
	LCD_cmd(0x28);
 2a2:	88 e2       	ldi	r24, 0x28	; 40
 2a4:	0e 94 23 01 	call	0x246	; 0x246 <LCD_cmd>
	LCD_cmd(0x0E);
 2a8:	8e e0       	ldi	r24, 0x0E	; 14
 2aa:	0e 94 23 01 	call	0x246	; 0x246 <LCD_cmd>
	LCD_cmd(0x01);
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	0e 94 23 01 	call	0x246	; 0x246 <LCD_cmd>
 2b4:	83 ef       	ldi	r24, 0xF3	; 243
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <LCD_init+0x38>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <LCD_init+0x3e>
 2be:	00 00       	nop
 2c0:	08 95       	ret

000002c2 <LCD_data>:
	PORTA |= (cmd << 4) ;
	
	LCD_en();
}
void LCD_data(uint8 data)
{
 2c2:	cf 93       	push	r28
 2c4:	c8 2f       	mov	r28, r24
	Set_Bit(PORTB,LCD_Rs);
 2c6:	88 b3       	in	r24, 0x18	; 24
 2c8:	81 60       	ori	r24, 0x01	; 1
 2ca:	88 bb       	out	0x18, r24	; 24
	PORTA &= 0x0F;
 2cc:	8b b3       	in	r24, 0x1b	; 27
 2ce:	8f 70       	andi	r24, 0x0F	; 15
 2d0:	8b bb       	out	0x1b, r24	; 27
	PORTA |= data & 0xF0;
 2d2:	8b b3       	in	r24, 0x1b	; 27
 2d4:	9c 2f       	mov	r25, r28
 2d6:	90 7f       	andi	r25, 0xF0	; 240
 2d8:	89 2b       	or	r24, r25
 2da:	8b bb       	out	0x1b, r24	; 27
	LCD_en();
 2dc:	0e 94 10 01 	call	0x220	; 0x220 <LCD_en>
	
	PORTA &= 0x0F;
 2e0:	8b b3       	in	r24, 0x1b	; 27
 2e2:	8f 70       	andi	r24, 0x0F	; 15
 2e4:	8b bb       	out	0x1b, r24	; 27
	PORTA |= (data << 4) ;
 2e6:	2b b3       	in	r18, 0x1b	; 27
 2e8:	30 e1       	ldi	r19, 0x10	; 16
 2ea:	c3 9f       	mul	r28, r19
 2ec:	c0 01       	movw	r24, r0
 2ee:	11 24       	eor	r1, r1
 2f0:	82 2b       	or	r24, r18
 2f2:	8b bb       	out	0x1b, r24	; 27
	LCD_en();
 2f4:	0e 94 10 01 	call	0x220	; 0x220 <LCD_en>
	
}
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <LCD_print>:
void LCD_print(uint8* dataptr)
{
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	cf 93       	push	r28
 302:	8c 01       	movw	r16, r24
	uint8  i = 0;
 304:	c0 e0       	ldi	r28, 0x00	; 0
	while(dataptr[i] != 0)
 306:	03 c0       	rjmp	.+6      	; 0x30e <LCD_print+0x12>
	{
		LCD_data(dataptr[i]);
 308:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_data>
		i++;
 30c:	cf 5f       	subi	r28, 0xFF	; 255
	
}
void LCD_print(uint8* dataptr)
{
	uint8  i = 0;
	while(dataptr[i] != 0)
 30e:	f8 01       	movw	r30, r16
 310:	ec 0f       	add	r30, r28
 312:	f1 1d       	adc	r31, r1
 314:	80 81       	ld	r24, Z
 316:	81 11       	cpse	r24, r1
 318:	f7 cf       	rjmp	.-18     	; 0x308 <LCD_print+0xc>
	{
		LCD_data(dataptr[i]);
		i++;
	}
}
 31a:	cf 91       	pop	r28
 31c:	1f 91       	pop	r17
 31e:	0f 91       	pop	r16
 320:	08 95       	ret

00000322 <main>:
#define s   40   //for low speed  (right and left motion)
/*********************************************************************Slave******************************************************/

int main()
{
	DCMOTOR_Init();
 322:	0e 94 41 00 	call	0x82	; 0x82 <DCMOTOR_Init>
	UART_Init();  
 326:	0e 94 b8 02 	call	0x570	; 0x570 <UART_Init>
	LCD_init();
 32a:	0e 94 40 01 	call	0x280	; 0x280 <LCD_init>
	DIO_PinDir(DIO_PortD,DIO_PIN0,DIO_INPUT); 		// SET RX AS INPUT
 32e:	40 e0       	ldi	r20, 0x00	; 0
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	83 e0       	ldi	r24, 0x03	; 3
 334:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DIO_PinDir>
	DCMOTOR_Start();
 338:	0e 94 b3 00 	call	0x166	; 0x166 <DCMOTOR_Start>
 33c:	2f e9       	ldi	r18, 0x9F	; 159
 33e:	86 e8       	ldi	r24, 0x86	; 134
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	21 50       	subi	r18, 0x01	; 1
 344:	80 40       	sbci	r24, 0x00	; 0
 346:	90 40       	sbci	r25, 0x00	; 0
 348:	e1 f7       	brne	.-8      	; 0x342 <main+0x20>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <main+0x2a>
 34c:	00 00       	nop
	uint8 data;  
	
	while (1)
	{
		_delay_ms(500);		//to make the receiver more accurate
		DCMOTOR_Start();	
 34e:	0e 94 b3 00 	call	0x166	; 0x166 <DCMOTOR_Start>
        data = UART_Rx();   //receiving the data from Master
 352:	0e 94 c2 02 	call	0x584	; 0x584 <UART_Rx>
		if(data == 'f')
 356:	86 36       	cpi	r24, 0x66	; 102
 358:	39 f4       	brne	.+14     	; 0x368 <main+0x46>
		{
			DCMOTOR_SetSpeed(f);
 35a:	86 e4       	ldi	r24, 0x46	; 70
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 b0 00 	call	0x160	; 0x160 <DCMOTOR_SetSpeed>
			Forward();
 362:	0e 94 b6 00 	call	0x16c	; 0x16c <Forward>
 366:	ea cf       	rjmp	.-44     	; 0x33c <main+0x1a>
		}
		else if(data == 'b')
 368:	82 36       	cpi	r24, 0x62	; 98
 36a:	39 f4       	brne	.+14     	; 0x37a <main+0x58>
		{
			DCMOTOR_SetSpeed(f);	   
 36c:	86 e4       	ldi	r24, 0x46	; 70
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 b0 00 	call	0x160	; 0x160 <DCMOTOR_SetSpeed>
			Backward();
 374:	0e 94 c8 00 	call	0x190	; 0x190 <Backward>
 378:	e1 cf       	rjmp	.-62     	; 0x33c <main+0x1a>
		}

		else if(data == 'r')
 37a:	82 37       	cpi	r24, 0x72	; 114
 37c:	39 f4       	brne	.+14     	; 0x38c <main+0x6a>
		{
			DCMOTOR_SetSpeed(s);
 37e:	88 e2       	ldi	r24, 0x28	; 40
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	0e 94 b0 00 	call	0x160	; 0x160 <DCMOTOR_SetSpeed>
			Right();
 386:	0e 94 da 00 	call	0x1b4	; 0x1b4 <Right>
 38a:	d8 cf       	rjmp	.-80     	; 0x33c <main+0x1a>
		}
	
		else if(data == 'l')
 38c:	8c 36       	cpi	r24, 0x6C	; 108
 38e:	39 f4       	brne	.+14     	; 0x39e <main+0x7c>
		{
			DCMOTOR_SetSpeed(s);
 390:	88 e2       	ldi	r24, 0x28	; 40
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 b0 00 	call	0x160	; 0x160 <DCMOTOR_SetSpeed>
			Left();
 398:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <Left>
 39c:	cf cf       	rjmp	.-98     	; 0x33c <main+0x1a>
		}
		else if(data == 's')
 39e:	83 37       	cpi	r24, 0x73	; 115
 3a0:	69 f6       	brne	.-102    	; 0x33c <main+0x1a>
		{    
			Stop();
 3a2:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Stop>
 3a6:	ca cf       	rjmp	.-108    	; 0x33c <main+0x1a>

000003a8 <DIO_PinDir>:

#include "DIO.h"

void DIO_PinDir(DIO_PORT Port, DIO_Pin Pin, DIO_State Dir)
{
	if (Port <= DIO_PortD && Pin <= DIO_PIN7 && Dir <= DIO_OUTPUT)
 3a8:	84 30       	cpi	r24, 0x04	; 4
 3aa:	08 f0       	brcs	.+2      	; 0x3ae <DIO_PinDir+0x6>
 3ac:	53 c0       	rjmp	.+166    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 3ae:	68 30       	cpi	r22, 0x08	; 8
 3b0:	08 f0       	brcs	.+2      	; 0x3b4 <DIO_PinDir+0xc>
 3b2:	50 c0       	rjmp	.+160    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 3b4:	42 30       	cpi	r20, 0x02	; 2
 3b6:	08 f0       	brcs	.+2      	; 0x3ba <DIO_PinDir+0x12>
 3b8:	4d c0       	rjmp	.+154    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
	{
		switch (Dir)
 3ba:	41 30       	cpi	r20, 0x01	; 1
 3bc:	e1 f0       	breq	.+56     	; 0x3f6 <DIO_PinDir+0x4e>
 3be:	28 f0       	brcs	.+10     	; 0x3ca <DIO_PinDir+0x22>
 3c0:	42 30       	cpi	r20, 0x02	; 2
 3c2:	49 f1       	breq	.+82     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 3c4:	43 30       	cpi	r20, 0x03	; 3
 3c6:	b9 f1       	breq	.+110    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 3c8:	08 95       	ret
		{
			case DIO_PortA:
			DDRA &= ~(DIO_BIT_MASK << Pin);
 3ca:	2a b3       	in	r18, 0x1a	; 26
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	06 2e       	mov	r0, r22
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_PinDir+0x30>
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	0a 94       	dec	r0
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_PinDir+0x2c>
 3dc:	80 95       	com	r24
 3de:	82 23       	and	r24, r18
 3e0:	8a bb       	out	0x1a, r24	; 26
			DDRA |=  (Dir << Pin);
 3e2:	8a b3       	in	r24, 0x1a	; 26
 3e4:	50 e0       	ldi	r21, 0x00	; 0
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_PinDir+0x44>
 3e8:	44 0f       	add	r20, r20
 3ea:	55 1f       	adc	r21, r21
 3ec:	6a 95       	dec	r22
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_PinDir+0x40>
 3f0:	48 2b       	or	r20, r24
 3f2:	4a bb       	out	0x1a, r20	; 26
			break;
 3f4:	08 95       	ret
			case DIO_PortB:
			Clr_Bit(DDRB,Pin);
 3f6:	27 b3       	in	r18, 0x17	; 23
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	6a 95       	dec	r22
 404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_PinDir+0x56>
 406:	98 2f       	mov	r25, r24
 408:	90 95       	com	r25
 40a:	92 23       	and	r25, r18
 40c:	97 bb       	out	0x17, r25	; 23
			Set_Bit(DDRB,Pin);
 40e:	97 b3       	in	r25, 0x17	; 23
 410:	89 2b       	or	r24, r25
 412:	87 bb       	out	0x17, r24	; 23
			break;
 414:	08 95       	ret
			case DIO_PortC:
			Clr_Bit(DDRC,Pin);
 416:	24 b3       	in	r18, 0x14	; 20
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	6a 95       	dec	r22
 424:	e2 f7       	brpl	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 426:	98 2f       	mov	r25, r24
 428:	90 95       	com	r25
 42a:	92 23       	and	r25, r18
 42c:	94 bb       	out	0x14, r25	; 20
			Set_Bit(DDRC,Pin);
 42e:	94 b3       	in	r25, 0x14	; 20
 430:	89 2b       	or	r24, r25
 432:	84 bb       	out	0x14, r24	; 20
			break;
 434:	08 95       	ret
			case DIO_PortD:
			Clr_Bit(DDRD,Pin);
 436:	21 b3       	in	r18, 0x11	; 17
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	02 c0       	rjmp	.+4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	6a 95       	dec	r22
 444:	e2 f7       	brpl	.-8      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 446:	98 2f       	mov	r25, r24
 448:	90 95       	com	r25
 44a:	92 23       	and	r25, r18
 44c:	91 bb       	out	0x11, r25	; 17
			Set_Bit(DDRD,Pin);
 44e:	91 b3       	in	r25, 0x11	; 17
 450:	89 2b       	or	r24, r25
 452:	81 bb       	out	0x11, r24	; 17
 454:	08 95       	ret

00000456 <DIO_PinVal>:
	}
}

void DIO_PinVal(DIO_PORT Port, DIO_Pin Pin, DIO_Level Val)
{
	if (Port <= DIO_PortD && Pin <= DIO_PIN7 && Val <= DIO_HIGH)
 456:	84 30       	cpi	r24, 0x04	; 4
 458:	08 f0       	brcs	.+2      	; 0x45c <DIO_PinVal+0x6>
 45a:	66 c0       	rjmp	.+204    	; 0x528 <DIO_PinVal+0xd2>
 45c:	68 30       	cpi	r22, 0x08	; 8
 45e:	08 f0       	brcs	.+2      	; 0x462 <DIO_PinVal+0xc>
 460:	63 c0       	rjmp	.+198    	; 0x528 <DIO_PinVal+0xd2>
 462:	42 30       	cpi	r20, 0x02	; 2
 464:	08 f0       	brcs	.+2      	; 0x468 <DIO_PinVal+0x12>
 466:	60 c0       	rjmp	.+192    	; 0x528 <DIO_PinVal+0xd2>
	{
		switch (Port)
 468:	81 30       	cpi	r24, 0x01	; 1
 46a:	e9 f0       	breq	.+58     	; 0x4a6 <DIO_PinVal+0x50>
 46c:	30 f0       	brcs	.+12     	; 0x47a <DIO_PinVal+0x24>
 46e:	82 30       	cpi	r24, 0x02	; 2
 470:	81 f1       	breq	.+96     	; 0x4d2 <DIO_PinVal+0x7c>
 472:	83 30       	cpi	r24, 0x03	; 3
 474:	09 f4       	brne	.+2      	; 0x478 <DIO_PinVal+0x22>
 476:	43 c0       	rjmp	.+134    	; 0x4fe <DIO_PinVal+0xa8>
 478:	08 95       	ret
		{
			case DIO_PortA:
			PORTA &= ~(DIO_BIT_MASK << Pin);
 47a:	2b b3       	in	r18, 0x1b	; 27
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	06 2e       	mov	r0, r22
 482:	02 c0       	rjmp	.+4      	; 0x488 <DIO_PinVal+0x32>
 484:	88 0f       	add	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	0a 94       	dec	r0
 48a:	e2 f7       	brpl	.-8      	; 0x484 <DIO_PinVal+0x2e>
 48c:	80 95       	com	r24
 48e:	82 23       	and	r24, r18
 490:	8b bb       	out	0x1b, r24	; 27
			PORTA |=  (Val << Pin);
 492:	8b b3       	in	r24, 0x1b	; 27
 494:	50 e0       	ldi	r21, 0x00	; 0
 496:	02 c0       	rjmp	.+4      	; 0x49c <DIO_PinVal+0x46>
 498:	44 0f       	add	r20, r20
 49a:	55 1f       	adc	r21, r21
 49c:	6a 95       	dec	r22
 49e:	e2 f7       	brpl	.-8      	; 0x498 <DIO_PinVal+0x42>
 4a0:	48 2b       	or	r20, r24
 4a2:	4b bb       	out	0x1b, r20	; 27
			break;
 4a4:	08 95       	ret
			case DIO_PortB:
			PORTB &= ~(DIO_BIT_MASK << Pin);
 4a6:	28 b3       	in	r18, 0x18	; 24
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	06 2e       	mov	r0, r22
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_PinVal+0x5e>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	0a 94       	dec	r0
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_PinVal+0x5a>
 4b8:	80 95       	com	r24
 4ba:	82 23       	and	r24, r18
 4bc:	88 bb       	out	0x18, r24	; 24
			PORTB |=  (Val << Pin);
 4be:	88 b3       	in	r24, 0x18	; 24
 4c0:	50 e0       	ldi	r21, 0x00	; 0
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <DIO_PinVal+0x72>
 4c4:	44 0f       	add	r20, r20
 4c6:	55 1f       	adc	r21, r21
 4c8:	6a 95       	dec	r22
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <DIO_PinVal+0x6e>
 4cc:	48 2b       	or	r20, r24
 4ce:	48 bb       	out	0x18, r20	; 24
			break;
 4d0:	08 95       	ret
			case DIO_PortC:
			PORTC &= ~(DIO_BIT_MASK << Pin);
 4d2:	25 b3       	in	r18, 0x15	; 21
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	06 2e       	mov	r0, r22
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <DIO_PinVal+0x8a>
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	0a 94       	dec	r0
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <DIO_PinVal+0x86>
 4e4:	80 95       	com	r24
 4e6:	82 23       	and	r24, r18
 4e8:	85 bb       	out	0x15, r24	; 21
			PORTC |=  (Val << Pin);
 4ea:	85 b3       	in	r24, 0x15	; 21
 4ec:	50 e0       	ldi	r21, 0x00	; 0
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <DIO_PinVal+0x9e>
 4f0:	44 0f       	add	r20, r20
 4f2:	55 1f       	adc	r21, r21
 4f4:	6a 95       	dec	r22
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <DIO_PinVal+0x9a>
 4f8:	48 2b       	or	r20, r24
 4fa:	45 bb       	out	0x15, r20	; 21
			break;
 4fc:	08 95       	ret
			case DIO_PortD:
			PORTD &= ~(DIO_BIT_MASK << Pin);
 4fe:	22 b3       	in	r18, 0x12	; 18
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	06 2e       	mov	r0, r22
 506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_PinVal+0xb6>
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	0a 94       	dec	r0
 50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_PinVal+0xb2>
 510:	80 95       	com	r24
 512:	82 23       	and	r24, r18
 514:	82 bb       	out	0x12, r24	; 18
			PORTD |=  (Val << Pin);
 516:	82 b3       	in	r24, 0x12	; 18
 518:	50 e0       	ldi	r21, 0x00	; 0
 51a:	02 c0       	rjmp	.+4      	; 0x520 <DIO_PinVal+0xca>
 51c:	44 0f       	add	r20, r20
 51e:	55 1f       	adc	r21, r21
 520:	6a 95       	dec	r22
 522:	e2 f7       	brpl	.-8      	; 0x51c <DIO_PinVal+0xc6>
 524:	48 2b       	or	r20, r24
 526:	42 bb       	out	0x12, r20	; 18
 528:	08 95       	ret

0000052a <PWM0_Init>:
/**************************************************_Functions_Definitions_*********************************************/

void PWM0_Init()
{
	
	DDRB |=(1<<3);		//set OC0 as PWM output
 52a:	87 b3       	in	r24, 0x17	; 23
 52c:	88 60       	ori	r24, 0x08	; 8
 52e:	87 bb       	out	0x17, r24	; 23
	#if PWM_MODE == Fast_PWM
	TCCR0 |=(1<<3);
 530:	83 b7       	in	r24, 0x33	; 51
 532:	88 60       	ori	r24, 0x08	; 8
 534:	83 bf       	out	0x33, r24	; 51
	TCCR0 |=(1<<6);
 536:	83 b7       	in	r24, 0x33	; 51
 538:	80 64       	ori	r24, 0x40	; 64
 53a:	83 bf       	out	0x33, r24	; 51
	TCCR0 &=~(1<<3);
	TCCR0 |=(1<<6);

	#endif
	#if Compare_Output_Mode == NON_INVERTED
	TCCR0 &=~(1<<4);
 53c:	83 b7       	in	r24, 0x33	; 51
 53e:	8f 7e       	andi	r24, 0xEF	; 239
 540:	83 bf       	out	0x33, r24	; 51
	TCCR0 |=(1<<5);
 542:	83 b7       	in	r24, 0x33	; 51
 544:	80 62       	ori	r24, 0x20	; 32
 546:	83 bf       	out	0x33, r24	; 51
 548:	08 95       	ret

0000054a <PWM0_SetDutyCycle>:
{
	
	#if PWM_MODE == Fast_PWM

	#if Compare_Output_Mode == NON_INVERTED
	     if(duty_cycle <= 100 && duty_cycle >0){
 54a:	9f ef       	ldi	r25, 0xFF	; 255
 54c:	98 0f       	add	r25, r24
 54e:	94 36       	cpi	r25, 0x64	; 100
 550:	50 f4       	brcc	.+20     	; 0x566 <PWM0_SetDutyCycle+0x1c>
		OCR0=(((duty_cycle *255)/100)-1);
 552:	2f ef       	ldi	r18, 0xFF	; 255
 554:	82 9f       	mul	r24, r18
 556:	c0 01       	movw	r24, r0
 558:	11 24       	eor	r1, r1
 55a:	64 e6       	ldi	r22, 0x64	; 100
 55c:	70 e0       	ldi	r23, 0x00	; 0
 55e:	0e 94 c6 02 	call	0x58c	; 0x58c <__divmodhi4>
 562:	61 50       	subi	r22, 0x01	; 1
 564:	6c bf       	out	0x3c, r22	; 60
 566:	08 95       	ret

00000568 <PWM0_Start>:

void PWM0_Start()
{
	
	#if TIMER0_PRESCALER == 1024
	TCCR0 |=(5<<0);
 568:	83 b7       	in	r24, 0x33	; 51
 56a:	85 60       	ori	r24, 0x05	; 5
 56c:	83 bf       	out	0x33, r24	; 51
 56e:	08 95       	ret

00000570 <UART_Init>:
	{
		while (!((UCSRA>>UDRE)&1));
		UDR = *st;
		st++;
	}
}
 570:	8b b1       	in	r24, 0x0b	; 11
 572:	8d 7f       	andi	r24, 0xFD	; 253
 574:	8b b9       	out	0x0b, r24	; 11
 576:	8a b1       	in	r24, 0x0a	; 10
 578:	80 61       	ori	r24, 0x10	; 16
 57a:	8a b9       	out	0x0a, r24	; 10
 57c:	85 e0       	ldi	r24, 0x05	; 5
 57e:	89 b9       	out	0x09, r24	; 9
 580:	10 bc       	out	0x20, r1	; 32
 582:	08 95       	ret

00000584 <UART_Rx>:

uint8 UART_Rx(void)
{
	uint8 received_data = 0;
	while(Get_Bit(UCSRA, 7) == 0);
 584:	5f 9b       	sbis	0x0b, 7	; 11
 586:	fe cf       	rjmp	.-4      	; 0x584 <UART_Rx>
	received_data = UDR;
	return received_data;
 588:	8c b1       	in	r24, 0x0c	; 12
 58a:	08 95       	ret

0000058c <__divmodhi4>:
 58c:	97 fb       	bst	r25, 7
 58e:	07 2e       	mov	r0, r23
 590:	16 f4       	brtc	.+4      	; 0x596 <__divmodhi4+0xa>
 592:	00 94       	com	r0
 594:	07 d0       	rcall	.+14     	; 0x5a4 <__divmodhi4_neg1>
 596:	77 fd       	sbrc	r23, 7
 598:	09 d0       	rcall	.+18     	; 0x5ac <__divmodhi4_neg2>
 59a:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__udivmodhi4>
 59e:	07 fc       	sbrc	r0, 7
 5a0:	05 d0       	rcall	.+10     	; 0x5ac <__divmodhi4_neg2>
 5a2:	3e f4       	brtc	.+14     	; 0x5b2 <__divmodhi4_exit>

000005a4 <__divmodhi4_neg1>:
 5a4:	90 95       	com	r25
 5a6:	81 95       	neg	r24
 5a8:	9f 4f       	sbci	r25, 0xFF	; 255
 5aa:	08 95       	ret

000005ac <__divmodhi4_neg2>:
 5ac:	70 95       	com	r23
 5ae:	61 95       	neg	r22
 5b0:	7f 4f       	sbci	r23, 0xFF	; 255

000005b2 <__divmodhi4_exit>:
 5b2:	08 95       	ret

000005b4 <__udivmodhi4>:
 5b4:	aa 1b       	sub	r26, r26
 5b6:	bb 1b       	sub	r27, r27
 5b8:	51 e1       	ldi	r21, 0x11	; 17
 5ba:	07 c0       	rjmp	.+14     	; 0x5ca <__udivmodhi4_ep>

000005bc <__udivmodhi4_loop>:
 5bc:	aa 1f       	adc	r26, r26
 5be:	bb 1f       	adc	r27, r27
 5c0:	a6 17       	cp	r26, r22
 5c2:	b7 07       	cpc	r27, r23
 5c4:	10 f0       	brcs	.+4      	; 0x5ca <__udivmodhi4_ep>
 5c6:	a6 1b       	sub	r26, r22
 5c8:	b7 0b       	sbc	r27, r23

000005ca <__udivmodhi4_ep>:
 5ca:	88 1f       	adc	r24, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	5a 95       	dec	r21
 5d0:	a9 f7       	brne	.-22     	; 0x5bc <__udivmodhi4_loop>
 5d2:	80 95       	com	r24
 5d4:	90 95       	com	r25
 5d6:	bc 01       	movw	r22, r24
 5d8:	cd 01       	movw	r24, r26
 5da:	08 95       	ret

000005dc <_exit>:
 5dc:	f8 94       	cli

000005de <__stop_program>:
 5de:	ff cf       	rjmp	.-2      	; 0x5de <__stop_program>
